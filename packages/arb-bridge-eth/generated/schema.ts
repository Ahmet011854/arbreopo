// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class OutBoxTransactionExecuted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("destAddr", Value.fromBytes(Bytes.empty()));
    this.set("l2Sender", Value.fromBytes(Bytes.empty()));
    this.set("outboxEntryIndex", Value.fromBigInt(BigInt.zero()));
    this.set("transactionIndex", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save OutBoxTransactionExecuted entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OutBoxTransactionExecuted entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OutBoxTransactionExecuted", id.toString(), this);
    }
  }

  static load(id: string): OutBoxTransactionExecuted | null {
    return changetype<OutBoxTransactionExecuted | null>(
      store.get("OutBoxTransactionExecuted", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get destAddr(): Bytes {
    let value = this.get("destAddr");
    return value!.toBytes();
  }

  set destAddr(value: Bytes) {
    this.set("destAddr", Value.fromBytes(value));
  }

  get l2Sender(): Bytes {
    let value = this.get("l2Sender");
    return value!.toBytes();
  }

  set l2Sender(value: Bytes) {
    this.set("l2Sender", Value.fromBytes(value));
  }

  get outboxEntryIndex(): BigInt {
    let value = this.get("outboxEntryIndex");
    return value!.toBigInt();
  }

  set outboxEntryIndex(value: BigInt) {
    this.set("outboxEntryIndex", Value.fromBigInt(value));
  }

  get transactionIndex(): BigInt {
    let value = this.get("transactionIndex");
    return value!.toBigInt();
  }

  set transactionIndex(value: BigInt) {
    this.set("transactionIndex", Value.fromBigInt(value));
  }
}

export class OutboxEntryCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("batchNum", Value.fromBigInt(BigInt.zero()));
    this.set("outboxEntryIndex", Value.fromBigInt(BigInt.zero()));
    this.set("outputRoot", Value.fromBytes(Bytes.empty()));
    this.set("numInBatch", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OutboxEntryCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OutboxEntryCreated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OutboxEntryCreated", id.toString(), this);
    }
  }

  static load(id: string): OutboxEntryCreated | null {
    return changetype<OutboxEntryCreated | null>(
      store.get("OutboxEntryCreated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get batchNum(): BigInt {
    let value = this.get("batchNum");
    return value!.toBigInt();
  }

  set batchNum(value: BigInt) {
    this.set("batchNum", Value.fromBigInt(value));
  }

  get outboxEntryIndex(): BigInt {
    let value = this.get("outboxEntryIndex");
    return value!.toBigInt();
  }

  set outboxEntryIndex(value: BigInt) {
    this.set("outboxEntryIndex", Value.fromBigInt(value));
  }

  get outputRoot(): Bytes {
    let value = this.get("outputRoot");
    return value!.toBytes();
  }

  set outputRoot(value: Bytes) {
    this.set("outputRoot", Value.fromBytes(value));
  }

  get numInBatch(): BigInt {
    let value = this.get("numInBatch");
    return value!.toBigInt();
  }

  set numInBatch(value: BigInt) {
    this.set("numInBatch", Value.fromBigInt(value));
  }
}
