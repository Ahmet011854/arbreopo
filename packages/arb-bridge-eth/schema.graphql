type OutboxEntry @entity {
  "batchNum hexstring which is the unique identifier and primary key of the entity"
  id: ID!
  outboxEntryIndex: BigInt! # uint256
  outputRoot: Bytes! # bytes32
  numInBatch: BigInt! # uint256
  spentOutput: [OutboxOutput!] @derivedFrom(field: "outboxEntry")
}

type OutboxOutput @entity {
  "this ID is not the same as the outputId used on chain"
  id: ID!
  destAddr: Bytes! # address
  l2Sender: Bytes! # address
  path: BigInt! # uint256
  outboxEntry: OutboxEntry!
  "if OutboxOutput exists, it means it has been spent"
  spent: Boolean!
}

enum MessageKind {
  EthDeposit
  Retryable
  NotSupported
}

type InboxMessage @entity {
  "the inbox sequence number of the current message"
  id: ID!
  "a inbox message goes through multiple indexing steps, this indicates if all are done"
  isProcessed: Boolean!
  "is this inbox message a regular eth deposit or a retryable"
  kind: MessageKind!
  "value sent with message"
  value: BigInt!
  "optional field that indicates the L2 address"
  destAddr: Bytes
}
