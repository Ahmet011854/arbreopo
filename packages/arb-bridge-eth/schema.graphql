type OutboxEntry @entity {
  "batchNum hexstring which is the unique identifier and primary key of the entity"
  id: ID!
  outboxEntryIndex: BigInt! # uint256
  outputRoot: Bytes! # bytes32
  numInBatch: BigInt! # uint256
  spentOutput: [OutboxOutput!] @derivedFrom(field: "outboxEntry")
}

type OutboxOutput @entity {
  "this ID is not the same as the outputId used on chain"
  id: ID!
  destAddr: Bytes! # address
  l2Sender: Bytes! # address
  path: BigInt! # uint256
  outboxEntry: OutboxEntry!
  "if OutboxOutput exists, it means it has been spent"
  spent: Boolean!
}

enum MessageKind {
  Retryable
  NotSupported
}

type RawMessage @entity {
  "the inbox sequence number of the current message"
  id: ID!
  "is this inbox message a regular eth deposit or a retryable"
  kind: MessageKind!
}

type Retryable @entity {
  "the inbox sequence number of the current message"
  id: ID!
  "is the current retryable a deposit of eth"
  isEthDeposit: Boolean!
  "value sent with message"
  value: BigInt!
  "indicates the L2 address destination"
  destAddr: Bytes! # bytes32
  "ticket id of retryable"
  retryableTicketID: Bytes! # bytes32
  "calldata used in L2 call"
  l2Calldata: Bytes!
}

enum NodeStatus {
  Pending
  Confirmed
  Rejected
}

type Node @entity {
  "node number in hex"
  id: ID!
  "hash of information contained in this node"
  nodeHash: Bytes!
  "hash of parent node"
  parentHash: Bytes!
  "block the node was created"
  blockCreatedAt: BigInt!
  "count of inbox at time of assertion"
  inboxMaxCount: BigInt!
  "confirmation status of node in the rollup"
  status: NodeStatus!
}
