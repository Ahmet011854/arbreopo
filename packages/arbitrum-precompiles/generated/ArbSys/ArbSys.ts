// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class L2ToL1Transaction extends ethereum.Event {
  get params(): L2ToL1Transaction__Params {
    return new L2ToL1Transaction__Params(this);
  }
}

export class L2ToL1Transaction__Params {
  _event: L2ToL1Transaction;

  constructor(event: L2ToL1Transaction) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get destination(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uniqueId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get batchNumber(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get indexInBatch(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get arbBlockNum(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get ethBlockNum(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get callvalue(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }
}

export class ArbSys extends ethereum.SmartContract {
  static bind(address: Address): ArbSys {
    return new ArbSys("ArbSys", address);
  }

  arbBlockNumber(): BigInt {
    let result = super.call("arbBlockNumber", "arbBlockNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_arbBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "arbBlockNumber",
      "arbBlockNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  arbChainID(): BigInt {
    let result = super.call("arbChainID", "arbChainID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_arbChainID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("arbChainID", "arbChainID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  arbOSVersion(): BigInt {
    let result = super.call("arbOSVersion", "arbOSVersion():(uint256)", []);

    return result[0].toBigInt();
  }

  try_arbOSVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("arbOSVersion", "arbOSVersion():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageAt(account: Address, index: BigInt): BigInt {
    let result = super.call(
      "getStorageAt",
      "getStorageAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStorageAt(
    account: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStorageAt",
      "getStorageAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransactionCount(account: Address): BigInt {
    let result = super.call(
      "getTransactionCount",
      "getTransactionCount(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getTransactionCount(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTransactionCount",
      "getTransactionCount(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isTopLevelCall(): boolean {
    let result = super.call("isTopLevelCall", "isTopLevelCall():(bool)", []);

    return result[0].toBoolean();
  }

  try_isTopLevelCall(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isTopLevelCall", "isTopLevelCall():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class SendTxToL1Call extends ethereum.Call {
  get inputs(): SendTxToL1Call__Inputs {
    return new SendTxToL1Call__Inputs(this);
  }

  get outputs(): SendTxToL1Call__Outputs {
    return new SendTxToL1Call__Outputs(this);
  }
}

export class SendTxToL1Call__Inputs {
  _call: SendTxToL1Call;

  constructor(call: SendTxToL1Call) {
    this._call = call;
  }

  get destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get calldataForL1(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SendTxToL1Call__Outputs {
  _call: SendTxToL1Call;

  constructor(call: SendTxToL1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawEthCall extends ethereum.Call {
  get inputs(): WithdrawEthCall__Inputs {
    return new WithdrawEthCall__Inputs(this);
  }

  get outputs(): WithdrawEthCall__Outputs {
    return new WithdrawEthCall__Outputs(this);
  }
}

export class WithdrawEthCall__Inputs {
  _call: WithdrawEthCall;

  constructor(call: WithdrawEthCall) {
    this._call = call;
  }

  get destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawEthCall__Outputs {
  _call: WithdrawEthCall;

  constructor(call: WithdrawEthCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
