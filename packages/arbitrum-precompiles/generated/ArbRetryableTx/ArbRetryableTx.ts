// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Canceled extends ethereum.Event {
  get params(): Canceled__Params {
    return new Canceled__Params(this);
  }
}

export class Canceled__Params {
  _event: Canceled;

  constructor(event: Canceled) {
    this._event = event;
  }

  get ticketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class LifetimeExtended extends ethereum.Event {
  get params(): LifetimeExtended__Params {
    return new LifetimeExtended__Params(this);
  }
}

export class LifetimeExtended__Params {
  _event: LifetimeExtended;

  constructor(event: LifetimeExtended) {
    this._event = event;
  }

  get ticketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newTimeout(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get ticketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class TicketCreated extends ethereum.Event {
  get params(): TicketCreated__Params {
    return new TicketCreated__Params(this);
  }
}

export class TicketCreated__Params {
  _event: TicketCreated;

  constructor(event: TicketCreated) {
    this._event = event;
  }

  get ticketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ArbRetryableTx__getKeepalivePriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ArbRetryableTx__getSubmissionPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ArbRetryableTx extends ethereum.SmartContract {
  static bind(address: Address): ArbRetryableTx {
    return new ArbRetryableTx("ArbRetryableTx", address);
  }

  getBeneficiary(ticketId: Bytes): Address {
    let result = super.call(
      "getBeneficiary",
      "getBeneficiary(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(ticketId)]
    );

    return result[0].toAddress();
  }

  try_getBeneficiary(ticketId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBeneficiary",
      "getBeneficiary(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(ticketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getKeepalivePrice(ticketId: Bytes): ArbRetryableTx__getKeepalivePriceResult {
    let result = super.call(
      "getKeepalivePrice",
      "getKeepalivePrice(bytes32):(uint256,uint256)",
      [ethereum.Value.fromFixedBytes(ticketId)]
    );

    return new ArbRetryableTx__getKeepalivePriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getKeepalivePrice(
    ticketId: Bytes
  ): ethereum.CallResult<ArbRetryableTx__getKeepalivePriceResult> {
    let result = super.tryCall(
      "getKeepalivePrice",
      "getKeepalivePrice(bytes32):(uint256,uint256)",
      [ethereum.Value.fromFixedBytes(ticketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ArbRetryableTx__getKeepalivePriceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getLifetime(): BigInt {
    let result = super.call("getLifetime", "getLifetime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLifetime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLifetime", "getLifetime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSubmissionPrice(
    calldataSize: BigInt
  ): ArbRetryableTx__getSubmissionPriceResult {
    let result = super.call(
      "getSubmissionPrice",
      "getSubmissionPrice(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(calldataSize)]
    );

    return new ArbRetryableTx__getSubmissionPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getSubmissionPrice(
    calldataSize: BigInt
  ): ethereum.CallResult<ArbRetryableTx__getSubmissionPriceResult> {
    let result = super.tryCall(
      "getSubmissionPrice",
      "getSubmissionPrice(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(calldataSize)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ArbRetryableTx__getSubmissionPriceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTimeout(ticketId: Bytes): BigInt {
    let result = super.call("getTimeout", "getTimeout(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(ticketId)
    ]);

    return result[0].toBigInt();
  }

  try_getTimeout(ticketId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTimeout", "getTimeout(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(ticketId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get ticketId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class KeepaliveCall extends ethereum.Call {
  get inputs(): KeepaliveCall__Inputs {
    return new KeepaliveCall__Inputs(this);
  }

  get outputs(): KeepaliveCall__Outputs {
    return new KeepaliveCall__Outputs(this);
  }
}

export class KeepaliveCall__Inputs {
  _call: KeepaliveCall;

  constructor(call: KeepaliveCall) {
    this._call = call;
  }

  get ticketId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class KeepaliveCall__Outputs {
  _call: KeepaliveCall;

  constructor(call: KeepaliveCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get txId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}
