type Gateway @entity {
  "gateway address hex string"
  id: ID!
  "tokens this gateway supports"
  tokens: [TokenGatewayJoinTable!] @derivedFrom(field: "gateway")
}

type Token @entity {
  "l1 token address hex string"
  id: ID!
  "l2 token address hex string, optional"
  l2Address: Bytes # address
  "gateway that supports this token"
  gateway: [TokenGatewayJoinTable!] @derivedFrom(field: "token")
}

type TokenGatewayJoinTable @entity {
  "Set to concat `gateway.id` and `token.id`"
  id: ID!
  "block in which the token-gateway were associated"
  blockNum: BigInt!
  gateway: Gateway!
  token: Token!
  withdrawals: [Withdrawal!] @derivedFrom(field: "exitInfo")
}

type Withdrawal @entity {
  "this is the l2ToL1Id of the transaction as surfaced by arb-os"
  id: ID!
  "the L2 block number when this was triggered"
  l2BlockNum: BigInt!
  from: Bytes!
  to: Bytes!
  amount: BigInt!
  exitNum: BigInt!
  exitInfo: TokenGatewayJoinTable!
  l2ToL1Event: L2ToL1Transaction
}

type L1ToL2Transaction @entity {
  "the ID of the L1 to L2 tx"
  id: ID!
  
  "address that called the inbox in the L1"
  from: Bytes! #address
  
  "the user tx hash of this retryable"
  userTxHash: Bytes! # bytes32

  "does this look like the user just deposited eth"
  looksLikeEthDeposit: Boolean!
  
  "this is the amount of eth transfered from L1 to L2 that is creditted to the from account"
  ethDepositAmount: BigInt!
}

type L2ToL1Transaction @entity {
  "BigInt! # uint256"
  id: ID!
  caller: Bytes! # address
  destination: Bytes! # address
  batchNumber: BigInt! # uint256
  indexInBatch: BigInt! # uint256
  arbBlockNum: BigInt! # uint256
  ethBlockNum: BigInt! # uint256
  timestamp: BigInt! # uint256
  callvalue: BigInt! # uint256
  data: Bytes! # bytes
  withdrawal: Withdrawal
}
